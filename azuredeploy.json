{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "vmSize": {
      "type": "string",
      "allowedValues": [
        "Standard_A1",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_D1",
        "Standard_D2",
        "Standard_D3",
        "Standard_D4"
      ],
      "metadata": {
        "description": "Size of vm"
      }
    },
    "username": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine."
      }
    },
    "password": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
    "newStorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Unique DNS Name for the Storage Account where the Virtual Machine's disks will be placed."
      }
    },
    "dnsNameForPublicIP": {
      "type": "string",
      "metadata": {
        "description": "Unique DNS Name for the Public IP used to access the Virtual Machine."
      }
    },
    "subscriptionId": {
      "type": "securestring",
      "metadata": {
        "description": "Your Azure subscription Id. Used to authenticate future Spinnaker requests against your subscription."
      }
    },
    "clientId": {
      "type": "securestring",
      "metadata": {
        "description": "Client Id of your service principal. Used to authenticate future Spinnaker requests against your subscription."
      }
    },
    "clientSecret": {
      "type": "securestring",
      "metadata": {
        "description": "Client Secret of your service principal. Used to authenticate future Spinnaker requests against your subscription. Also known as appKey or password."
      }
    },
    "tenantId": {
      "type": "securestring",
      "metadata": {
        "description": "Your Azure AD Tenant Id. Used to authenticate future Spinnaker requests against your subscription."
      }
    },
    "packerStorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Name of the storage account into which packer images should go."
      }
    },
    "packerResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Name of the resource group within which the packer storage account resides."
      }
    },
    "keyVaultResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Name of the resource group within which the KeyVault account resides."
      }
    },
    "keyVaultAccountName": {
      "type": "string",
      "metadata": {
        "description": "Name of your KeyVault account."
      }
    }
  },
  "variables": {
    "scenarioPrefix": "spinnaker",
    "apiVersion": "2015-05-01-preview",
    "imagePublisher": "Canonical",
    "imageOffer": "UbuntuServer",
    "ubuntuOSVersion": "14.04.2-LTS",
    "OSDiskName": "[concat(variables('scenarioPrefix'),'OSDisk02')]",
    "nicName": "[concat(variables('scenarioPrefix'),'Nic')]",
    "vnetAddressPrefix": "10.0.0.0/20",
    "subnet0Name": "[concat(variables('scenarioPrefix'),'Subnet0')]",
    "subnet0Prefix": "10.0.0.0/24",
    "subnet1Name": "[concat(variables('scenarioPrefix'),'Subnet1')]",
    "subnet1Prefix": "10.0.1.0/24",
    "subnet2Name": "[concat(variables('scenarioPrefix'),'Subnet2')]",
    "subnet2Prefix": "10.0.2.0/24",
    "storageAccountType": "Standard_LRS",
    "publicIPAddressName": "[concat(variables('scenarioPrefix'),'PublicIp')]",
    "publicIPAddressType": "Dynamic",
    "vmStorageAccountContainerName": "vhds",
    "vmName": "[concat(variables('scenarioPrefix'),'VM02')]",
    "virtualNetworkName": "[concat(variables('scenarioPrefix'),'Vnet')]",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "subnet0Ref": "[concat(variables('vnetID'),'/subnets/',variables('subnet0Name'))]",
    "credentials": {
      "tenantId": "[concat(' -t ', parameters('tenantId'))]",
      "subscriptionId": "[concat(' -s ', parameters('subscriptionId'))]",
      "clientId": "[concat(' -c ', parameters('clientId'))]",
      "clientSecret": "[concat(' -p ', parameters('clientSecret'))]"
    },
    "packer": {
      "resourceGroupName": "[concat(' -g ', parameters('packerResourceGroupName'))]",
      "storageAccountName": "[concat(' -h ', parameters('packerStorageAccountName'))]"
    },
    "keyVault": {
      "resourceGroupName": "[concat(' -r ', parameters('keyVaultResourceGroupName'))]",
      "keyVaultName": "[concat(' -k ', parameters('keyVaultAccountName'))]"
    },
    "customScript": {
      "fileUris": "https://raw.githubusercontent.com/dcaro/spinnakerhackfest/master/scripts/set_azure_spinnaker.sh",
      "commandToExecute": "bash set_azure_spinnaker.sh"
    }
  },
  "resources": [
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2015-06-01",
      "name": "[parameters('keyVaultAccountName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "enabledForDeployment": true,
        "enabledForTemplateDeployment": true,
        "enabledForVolumeEncryption": true,
        "tenantId": "[parameters('tenantId')]",
        "accessPolicies": [
          {
            "tenantId": "[parameters('tenantId')]",
            "objectId": "[parameters('clientId')]",
            "permissions": {
              "keys": [
                "all"
              ],
              "secrets": [
                "get"
              ]
            }
          }
        ],
        "sku": {
          "name": "standard",
          "family": "A"
        }
      },
      "resources": [
        {
          "type": "secrets",
          "name": "VMUsername",
          "apiVersion": "2015-06-01",
          "properties": {
            "value": "[parameters('username')]"
          },
          "dependsOn": [
            "[concat('Microsoft.KeyVault/vaults/', parameters('keyVaultAccountName'))]"
          ]
        },
        {
          "type": "secrets",
          "name": "VMPassword",
          "apiVersion": "2015-06-01",
          "properties": {
            "value": "[parameters('password')]"
          },
          "dependsOn": [
            "[concat('Microsoft.KeyVault/vaults/', parameters('keyVaultAccountName'))]"
          ]
        }
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('newStorageAccountName')]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[parameters('dnsNameForPublicIP')]"
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnetAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnet0Name')]",
            "properties": {
              "addressPrefix": "[variables('subnet0Prefix')]"
            }
          },
          {
            "name": "[variables('subnet1Name')]",
            "properties": {
              "addressPrefix": "[variables('subnet1Prefix')]"
            }
          },
          {
            "name": "[variables('subnet2Name')]",
            "properties": {
              "addressPrefix": "[variables('subnet2Prefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
              },
              "subnet": {
                "id": "[variables('subnet0Ref')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('vmName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', parameters('newStorageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vmName')]",
          "adminUsername": "[parameters('username')]",
          "adminPassword": "[parameters('password')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[variables('ubuntuOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk1",
            "vhd": {
              "uri": "[concat('http://',parameters('newStorageAccountName'),'.blob.core.windows.net/',variables('vmStorageAccountContainerName'),'/',variables('OSDiskName'),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmName'),'/installcustomscript')]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": "[split(variables('customScript').fileUris, ' ')]",
          "commandToExecute": "[concat(variables('customScript').commandToExecute, variables('credentials').subscriptionId, variables('credentials').tenantId, variables('credentials').clientId, variables('credentials').clientSecret, variables('packer').resourceGroupName, variables('packer').storageAccountName, variables('keyVault').resourceGroupName, variables('keyVault').keyVaultName)]"
        }
      }
    }
  ]
}